# -*- coding: utf-8 -*-
"""chat_floria.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yxAahDnL2W14k5429pwFfSl7FNQnJBrf
"""

# @title GDriveの接続
from google.colab import drive
drive.mount('/content/drive')

# @title ライブラリの読み込み
!pip install -q floria_snippets

# @title ## Floria Chat — Stable Edition (multiline input)
import os, requests, textwrap, re, json, datetime, glob
from dotenv import load_dotenv
from floria_snippets import SYSTEM_PROMPT, STARTER_USER_MSG

# ====== 設定 ======
load_dotenv('/content/drive/MyDrive/app/floria/secret.env')

_raw = os.getenv("LLAMA_BASE_URL", "https://openrouter.ai/api/v1").rstrip("/")
BASE = _raw + ("/v1" if _raw.endswith("/api") else "/api/v1") if not _raw.endswith("/api/v1") else _raw

MODEL = os.getenv("LLAMA_MODEL", "meta-llama/llama-3.1-70b-instruct")
API   = os.getenv("LLAMA_API_KEY")
if not API:  raise RuntimeError("LLAMA_API_KEY が未設定です。secret.env を確認してください。")
if not MODEL:raise RuntimeError("LLAMA_MODEL が未設定です。secret.env を確認してください。")

JUST_LOADED = False  # ← グローバル初期化（他と同じ階層に）

# ====== 会話履歴 ======
STYLE_GUARD = "出力は素の文章。行頭に装飾記号（*,・,•,★ など）を付けない。見出しや箇条書きは使わない。"
messages = [
    {"role":"system","content": SYSTEM_PROMPT + "\n" + STYLE_GUARD},
    {"role":"user","content": STARTER_USER_MSG}
]

# --- 表示設定 ---
WRAP = 30

# --- 行頭ゴミ除去 ---
CLEAN_HEAD = re.compile(r"^[\s\ufeff\*･・•★☆#,'’\"`\-]+")
def clean_reply(text: str) -> str:
    if not text: return text
    text = text.replace("*',*", "")
    lines = [CLEAN_HEAD.sub("", line) for line in text.splitlines()]
    return "\n".join(lines).strip()

def show_recent(n: int = 10):
    """直近 n 発言（user/assistantのみ）を時系列で表示"""
    dialog = [m for m in messages if m.get("role") in ("user", "assistant")]
    recent = dialog[-n:]  # 時系列のまま末尾n件
    if not recent:
        print("（表示できる会話がありません）\n")
        return
    print(f"🧾 最近の会話（{len(recent)}件）\n")
    for m in recent:
        role = m["role"]
        txt = m.get("content", "")
        if role == "assistant":
            txt = clean_reply(txt)
        wrapped = textwrap.fill(txt.strip(), width=WRAP)
        prefix = "あなた: " if role == "user" else "❄️フローリア: "
        print(prefix + "\n" + wrapped + "\n")

def show_assistant(text: str):
    text = clean_reply(text)
    print("❄️フローリア:\n" + textwrap.fill(text, width=WRAP) + "\n")

def multiline_input(prompt="あなた: "):
    """複数行入力→空行で送信。/bye 終了。/wrap N 折返し幅変更。"""
    global WRAP
    print(prompt)
    lines = []
    while True:
        line = input()
        if line == "":  # 空行で送信
            break
        low = line.strip().lower()
        if not lines and low.startswith("/wrap "):
            try:
                WRAP = max(20, int(low.split()[1]))
                print(f"↺ 折り返し幅を {WRAP} に変更しました。\n")
            except:
                print("↺ /wrap N で数値を指定してください（例：/wrap 40）\n")
            return ""    # この回は送らない
        lines.append(line)
    return "\n".join(lines).strip()

# ====== 会話ログ 保存/読込/リセット ======
LOG_DIR = "/content/drive/MyDrive/app/floria/chat_logs"
os.makedirs(LOG_DIR, exist_ok=True)

def save_log():
    ts = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    path = f"{LOG_DIR}/floria_{ts}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(messages, f, ensure_ascii=False, indent=2)
    print(f"🪶 会話を保存しました: {path}\n")

def load_log():
    global JUST_LOADED
    files = sorted(glob.glob(f"{LOG_DIR}/floria_*.json"))
    if not files:
        print("（保存された会話ログが見つかりません）\n")
        return
    print("📜 保存済みログ一覧：")
    for i, f in enumerate(files, 1):
        print(f"{i:02d}: {os.path.basename(f)}")
    sel = input("\n番号を入力（キャンセルは空Enter）: ").strip()
    if not sel: return
    try:
        idx = int(sel) - 1
        if 0 <= idx < len(files):
            with open(files[idx], "r", encoding="utf-8") as f:
                loaded = json.load(f)
            messages.clear()
            messages.extend(loaded)
            JUST_LOADED = True   # ← ここを追加
            print(f"↺ 会話を読み込みました: {files[idx]}\n")
            show_recent(10)
        else:
            print("（番号が範囲外です）\n")
    except Exception as e:
        print(f"（読み込み中にエラー: {e}）\n")

def reset_dialog():
    messages.clear()
    messages.extend([
        {"role":"system","content": SYSTEM_PROMPT + "\n" + STYLE_GUARD},
        {"role":"user","content": STARTER_USER_MSG}
    ])
    print("↺ 会話をリセットしました。\n")

# ====== フローリアの返答（_last_user 記録つき） ======
_last_user = None
def floria_say(user_text, temperature=0.7, max_tokens=300):
    global _last_user, JUST_LOADED
    if not user_text:
        return ""

    _last_user = user_text
    messages.append({"role":"user","content": user_text})

    try:
        resp = requests.post(
            f"{BASE}/chat/completions",
            headers={
                "Authorization": f"Bearer {API}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://colab.research.google.com",
                "X-Title": "Floria-Colab-Release"
            },
            json={
                "model": MODEL,
                "messages": messages,
                "temperature": temperature,
                "max_tokens": max_tokens
            },
            timeout=60
        )
        try:
            data = resp.json()
        except Exception:
            data = None

        if resp.status_code != 200:
            err_msg = (data.get("error", {}).get("message") or data.get("message") or resp.text[:500]) if isinstance(data, dict) else resp.text[:500]
            a = f"（ごめんなさい、冷たい霧で声が届きません… {resp.status_code}: {err_msg}）"
        else:
            a = data["choices"][0]["message"]["content"] if isinstance(data, dict) and data.get("choices") else f"（返事の形が凍ってしまったみたい…：{str(data)[:200]}）"

    except requests.exceptions.Timeout:
        a = "（回線が凍りついてしまったみたい…少ししてからもう一度お願いします）"
    except Exception as e:
        a = f"（思わぬ渦に巻き込まれました…: {e}）"

    messages.append({"role":"assistant","content": a})
    show_assistant(a)
    if not JUST_LOADED:     # ロード直後だけ自動保存スキップ
        save_log()
    JUST_LOADED = False
    return a
# ====== 対話ループ ======
print("🧊 フローリアと会話を始めます。\n・複数行OK／**空行で送信**／/bye 終了／/wrap N で折返し幅\n"
      "・/save 保存 ／ /load 読込 ／ /clear リセット ／ /retry 直前再送\n")
while True:
    t = multiline_input("あなた: ")
    cmd = t.strip().lower()

    if cmd == "/bye":
        print("（またね）"); break
    if cmd == "/save":
        save_log(); continue
    if cmd == "/load":
        load_log(); continue
    if cmd == "/clear":
        reset_dialog(); continue
    if cmd == "/retry":
        if _last_user: floria_say(_last_user)
        else: print("（直前の入力がありません）")
        continue
    if cmd.startswith("/recent"):
        try:
            n = int(cmd.split()[1])
        except:
            n = 10
        show_recent(n)
        continue
    if not t:
        continue

    floria_say(t)

import json

path = "/content/drive/MyDrive/app/floria/chat_logs/floria_20251031_163047.json"
with open(path, "r", encoding="utf-8") as f:
    data = json.load(f)

print(f"全ログ件数: {len(data)}")
print("末尾2件:")
for m in data[-2:]:
    print(f"[{m['role']}] {m['content'][:100]}...")